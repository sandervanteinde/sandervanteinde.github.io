self.webpackChunk([28],{wZe5:function(e,n,r){"use strict";r.r(n),r.d(n,"dayFourPartTwo",function(){return t});const t="const keyValueRegex = /(.*):(.*)/;\nconst fileReader = new MyFileReader(input);\nconst asRecords = fileReader.readEntriesSeperatedByWhiteline((lines) => {\n  return lines\n    .reduce((prev, next) => [...prev, ...next.split(' ')], [] as string[])\n    .reduce((prev, next) => {\n      const match = next.match(keyValueRegex);\n      if (!match) throw new Error(`Didn't find a match for ${next}`);\n      prev[match[1]] = match[2];\n      return prev;\n    }, {} as Record<string, string>);\n});\n\nconst eyeColors = ['amb', 'blu', 'brn', 'gry', 'grn', 'hzl', 'oth'];\nconst requiredFields: Record<string, (val: string) => boolean> = {\n  byr: (value) => value >= '1920' && value <= '2002',\n  iyr: (value) => value >= '2010' && value <= '2020',\n  eyr: (value) => value >= '2020' && value <= '2030',\n  hgt: (value) => {\n    const match = value.match(/^(d+)(cm|in)/);\n    if (match) {\n      const num = Number(match[1]);\n      return match[2] === 'cm'\n        ? num >= 150 && num <= 193\n        : num >= 59 && num <= 76;\n    }\n    return false;\n  },\n  hcl: (value) => value.match(/^#[a-z0-9]{6}$/i) !== null,\n  ecl: (value) => eyeColors.includes(value),\n  pid: (value) => value.match(/^d{9}$/) !== null,\n};\nconst requiredFieldEntries = Object.entries(requiredFields);\n\nconst validPasswords = asRecords.reduce((prev, next) => {\n  if (\n    requiredFieldEntries.every(\n      ([key, checkFN]) => key in next && checkFN(next[key])\n    )\n  ) {\n    return prev + 1;\n  }\n  return prev;\n}, 0);\n\nreturn validPasswords;"}});