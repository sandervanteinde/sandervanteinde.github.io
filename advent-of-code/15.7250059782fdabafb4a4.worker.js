self.webpackChunk([15],{"2tT0":function(t,e,n){"use strict";n.d(e,"a",function(){return r});class r{constructor(t){this._input=t.trim()}readLineByLine(t){const e=this._input.split(this.getSeperator()).filter(t=>t.length>0);return t?e.map(t):e}readAsTwoDimensionalArray(t){return this.readLineByLine().map(e=>{const n=e.split("");return t?n.map(t):n})}readEntriesSeperatedByWhiteline(t){const e=this._input.split(this.getSeperator()),n=[];let r=[];return e.forEach(t=>{0===t.length?r.length>0&&(n.push(r),r=[]):r.push(t)}),r.length>0&&n.push(r),t?n.map(t):n}getSeperator(){return-1===this._input.indexOf("\r")?"\n":-1===this._input.indexOf("\n")?"\r":"\r\n"}}},ICof:function(t,e,n){"use strict";n.r(e),n.d(e,"dayElevenPartTwo",function(){return i});var r=n("2tT0");function i(t){let e=new r.a("./inputs/day11.txt").readAsTwoDimensionalArray(t=>t);function n(t,n){let r=0;for(let i=-1;i<=1;i++){const o=t+i;if(o<0||o>=e.length)continue;const s=e[o];for(let t=-1;t<=1;t++){if(0===i&&0===t)continue;const o=n+t;o<0||o>=e.length||"#"===s[o]&&r++}}if(r>8)throw new Error("Invalid count");return r}function i(){console.log("Current grid");for(let t=0;t<e.length;t++)console.log(e[t].join(""));console.log("------------")}let o=0;do{const t=[];o=0;for(let r=0;r<e.length;r++){const i=e[r],s=[];t.push(s);for(let t=0;t<i.length;t++)switch(i[t]){case".":s.push(".");break;case"L":0===n(r,t)?(o++,s.push("#")):s.push("L");break;case"#":n(r,t)>=4?(s.push("L"),o++):s.push("#")}}if(t.length!==e.length||!t.every((t,n)=>t.length===e[n].length))throw new Error("New grid is not equal to grid");e=t,i()}while(o>0);return e.reduce((t,e)=>t+e.reduce((t,e)=>t+("#"===e?1:0),0),0)}}});