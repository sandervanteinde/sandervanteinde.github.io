(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{nhT9:function(n,e,r){"use strict";r.r(e),r.d(e,"dayNinePartTwo",function(){return i});const i="const fileReader = new MyFileReader(input);\nconst numbers = fileReader.readLineByLine(Number);\n\nfunction isNumberSumOfAnyCombination(\n  num: number,\n  combinations: Array<number>\n): boolean {\n  for (let i = 0; i < combinations.length - 1; i++) {\n    const iValue = combinations[i];\n    for (let j = i + 1; j < combinations.length; j++) {\n      const jValue = combinations[j];\n      if (iValue + jValue === num) return true;\n    }\n  }\n  return false;\n}\n\nlet weakness: number | undefined = undefined;\nfor (let i = 25; i < numbers.length; i++) {\n  if (!isNumberSumOfAnyCombination(numbers[i], numbers.slice(i - 25, i))) {\n    weakness = numbers[i];\n    break;\n  }\n}\nif (!weakness) throw new Error('Weakness not found');\n\nlet sum = 0;\nlet summedNumbers = [] as Array<number>;\nfor (let i = 0; i < numbers.length; i++) {\n  if (sum === weakness) {\n    const { min, max } = summedNumbers.reduce(\n      (prev, curr) => ({\n        min: Math.min(prev.min, curr),\n        max: Math.max(prev.max, curr),\n      }),\n      { min: Number.MAX_VALUE, max: Number.MIN_VALUE }\n    );\n    console.log(min + max);\n    break;\n  }\n  const theNumber = numbers[i];\n  sum += theNumber;\n  summedNumbers.push(theNumber);\n  while (sum > weakness) {\n    const [removedEntry] = summedNumbers.splice(0, 1);\n    sum -= removedEntry;\n  }\n}\n\nreturn sum;"}}]);