self.webpackChunk([29],{rSG7:function(n,e,t){"use strict";t.r(e),t.d(e,"daySevenPartTwo",function(){return a});const a="const fileReader = new MyFileReader(input);\n\nconst lineMatcher = /^([a-z]+) ([a-z]+) bags contain (.*).$/;\nconst inventoryMatcher = /^(d+) ([a-z]+) ([a-z]+) bags?$/;\n\nclass Bag {\n  constructor(\n    readonly bagType: string,\n    readonly contents: Record<string, number>\n  ) {}\n}\n\nfunction bagName(prefix: string, color: string) {\n  return `${prefix} ${color}`;\n}\n\nconst bags = fileReader.readLineByLine((line) => {\n  const match = line.match(lineMatcher);\n  if (!match) throw new Error(`line dit not match\n${line}`);\n  const [, bagPrefix, bagPostFix, inventory] = match;\n  if (inventory === 'no other bags') {\n    return new Bag(bagName(bagPrefix, bagPostFix), {});\n  }\n  const inventoryItemsAsString = inventory.split(', ');\n  const inventoryItems = inventoryItemsAsString.reduce((prev, next) => {\n    const inventoryMatch = next.match(inventoryMatcher);\n    if (!inventoryMatch) throw new Error(`Inventroy did not match\n${next}`);\n    const [, amount, bagPrefix, colorName] = inventoryMatch;\n    const name = bagName(bagPrefix, colorName);\n    prev[name] = Number(amount);\n    return prev;\n  }, {} as Record<string, number>);\n  return new Bag(bagName(bagPrefix, bagPostFix), inventoryItems);\n});\n\nconst bagsMap = new Map(bags.map((bag) => [bag.bagType, bag]));\nfunction containsShinyGoldBag(bag: Bag, bagType = 'shiny gold'): boolean {\n  if (bagType in bag.contents) return true;\n  return Object.keys(bag.contents).some((innerBag) => {\n    const inventoryBag = bagsMap.get(innerBag);\n    if (!inventoryBag)\n      throw new Error(`Did not manage to find bag\n${innerBag}`);\n    return containsShinyGoldBag(inventoryBag, bagType);\n  });\n}\n\nfunction countContents(bag: Bag): number {\n  let sum = 0;\n  for (const [inventoryBagName, amount] of Object.entries(bag.contents)) {\n    const inventoryBag = bagsMap.get(inventoryBagName);\n    if (!inventoryBag)\n      throw new Error(`Did not manage to find bag\n${inventoryBagName}`);\n    sum += amount + amount * countContents(inventoryBag);\n  }\n  return sum;\n}\n\nconst bagsWithShinyGoldBag = bags.reduce((prev, next) => {\n  if (containsShinyGoldBag(next)) {\n    return prev + 1;\n  }\n  return prev;\n}, 0);\n\nreturn countContents(bagsMap.get('shiny gold')!);"}});