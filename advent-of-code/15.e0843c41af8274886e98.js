(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{bU34:function(n,o,t){"use strict";t.r(o),t.d(o,"dayTwelvePartTwo",function(){return e});const e="const fileReader = new MyFileReader(input);\n\ntype OperationType = typeof operations[number];\ntype Direction = OperationType['direction'];\nconst operationRegex = /([NSEWLRF])(d+)/;\nconst operations = fileReader.readLineByLine((line) => {\n  const match = line.match(operationRegex);\n  if (!match) throw new Error('Line did not match regex');\n  const direction = match[1] as 'N' | 'S' | 'E' | 'W' | 'L' | 'R' | 'F';\n  const amount = Number(match[2]);\n  return { direction, amount };\n});\n\nconst ship = {\n  direction: 'E' as Direction,\n  coordinates: { x: 0, y: 0 },\n};\n\nconst waypoint = {\n  x: 10,\n  y: 1,\n};\n\nfunction turn(degrees: number) {\n  const radians = (degrees * Math.PI) / 180;\n  const oldWaypoint = { x: waypoint.x, y: waypoint.y };\n  waypoint.x = Math.round(\n    oldWaypoint.x * Math.cos(radians) + oldWaypoint.y * Math.sin(radians)\n  );\n  waypoint.y = Math.round(\n    -oldWaypoint.x * Math.sin(radians) + oldWaypoint.y * Math.cos(radians)\n  );\n}\n\nfunction moveDirection(direction: Direction, amount: number) {\n  switch (direction) {\n    case 'N':\n      waypoint.y += amount;\n      break;\n    case 'E':\n      waypoint.x += amount;\n      break;\n    case 'S':\n      waypoint.y -= amount;\n      break;\n    case 'W':\n      waypoint.x -= amount;\n      break;\n    case 'F':\n      ship.coordinates.x += amount * waypoint.x;\n      ship.coordinates.y += amount * waypoint.y;\n      break;\n    case 'R':\n      turn(amount);\n      break;\n    case 'L':\n      turn(360 - amount);\n      break;\n    default:\n      const unused: never = direction;\n      throw new Error(unused);\n  }\n}\n\n/**\n *        +y\n *        |\n *  -x ---|---- +x\n *        |\n *       -y\n */\nfor (const { direction, amount } of operations) {\n  moveDirection(direction, amount);\n}\n\nreturn Math.abs(ship.coordinates.x) + Math.abs(ship.coordinates.y);"}}]);