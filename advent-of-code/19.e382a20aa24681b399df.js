(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{piXi:function(e,n,r){"use strict";r.r(n),r.d(n,"daySixteenPartOne",function(){return a});const a="const ruleRegex = /([a-z ]+): (d+)-(d+) or (d+)-(d+)/;\n\nclass TicketRule {\n  readonly name: string;\n  private readonly _rangeOne: [number, number];\n  private readonly _rangeTwo: [number, number];\n  constructor(rule: string) {\n    const match = ruleRegex.exec(rule);\n    if(!match) throw new Error(`Unknown ticket rule: ${rule}`);\n    const [, name, rangeOneStart, rangeOneEnd, rangeTwoStart, rangeTwoEnd] = match;\n    this.name = name;\n    this._rangeOne = [Number(rangeOneStart), Number(rangeOneEnd)];\n    this._rangeTwo = [Number(rangeTwoStart), Number(rangeTwoEnd)];\n  }\n\n  isInRange(value: number): boolean {\n    return (this._rangeOne[0] <= value && this._rangeOne[1] >= value)\n      || (this._rangeTwo[0] <= value && this._rangeTwo[1] >= value);\n  }\n}\n\nfunction parseTicket(ticket: string): Array<number> {\n  const values = ticket.split(',').map(Number);\n  if(values.some(Number.isNaN)) {\n    throw new Error('Invalid ticket value found');\n  }\n  return values;\n}\nconst fileReader = new MyFileReader(input);\nconst [ticketRules,, [,...nearbyTickets]] = fileReader.readEntriesSeperatedByWhiteline();\nconst rules = ticketRules.map(rule => new TicketRule(rule));\nconst invalidTicketValues = nearbyTickets.map(parseTicket)\n  .reduce((prev, curr) => [...prev, ...curr], [] as Array<number>)\n  .filter(value => rules.every(rule => !rule.isInRange(value)));\n\nreturn invalidTicketValues.reduce((prev, curr) => prev + curr, 0);"}}]);